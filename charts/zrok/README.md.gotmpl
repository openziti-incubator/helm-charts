<!-- README.md generated by helm-docs from README.md.gotmpl -->

{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Overview

## Requirements

### Add the OpenZiti Charts Repo to Helm

```bash
helm repo add openziti https://docs.openziti.io/helm-charts/
```

## Minimal Example with Nginx Ingress

This example does not configure TLS termination for the API or public shares, metrics, or limits. You must configure a
wildcard DNS record (A record) that resolve to the value of `ZROK_ZONE`. 

Use an `sslip.io` wildcard/zone like `zrok.192.168.49.2.sslip.io` for testing and tiny scale deployments if you
want to avoid setting up DNS. This works with any IP address.

```bash
ZROK_ZONE=zrok.example.com
ZITI_NAMESPACE=miniziti
ZITI_MGMT_API_HOST=ziti-controller-client.${ZITI_NAMESPACE}.svc.cluster.local
ZITI_PWD=$(kubectl -n "${ZITI_NAMESPACE}" get secrets "ziti-controller-admin-secret" \
    --output go-template='{{"{{"}}index .data "admin-password" | base64decode{{"}}"}}')

helm upgrade \
    --install \
    --namespace zrok --create-namespace \
    --values https://openziti.io/helm-charts/charts/zrok/values-ingress-nginx.yaml \
    --set "ziti.advertisedHost=${ZITI_MGMT_API_HOST}" \
    --set "ziti.password=${ZITI_PWD}" \
    --set "dnsZone=${ZROK_ZONE}" \
    --set "controller.ingress.hosts[0]=ctrl.${ZROK_ZONE}" \
    zrok openziti/zrok
```

## TLS termination with Nginx

One way to terminate TLS with Nginx is to use Cert Manager. Here's an overview.

1. Install Cert Manager
1. Create a ClusterIssuer with a Let's Encrypt account and DNS challenge solver. Solving the DNS challenge is one way
    for Cert Manager to obtain a wildcard certificate which is necessary for zrok frontend's Ingress.
1. Annotate zrok's Ingresses with the name of the ClusterIssuer.

    ```bash
    helm upgrade zrok \
        --set "frontend.ingress.annotations=cert-manager.io/cluster-issuer: letsencrypt-prod" \
        --set "controller.ingress.annotations=cert-manager.io/cluster-issuer: letsencrypt-prod" \
        openziti/zrok
    ```

## Values Reference

{{ template "chart.valuesTable" . }}

<!-- README.md generated by helm-docs from README.md.gotmpl -->
