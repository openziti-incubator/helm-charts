---
apiVersion: v1
kind: Secret
metadata:
    name: {{ include "zrok.fullname" . }}-admin-secret
    labels:
        {{- include "zrok.labels" . | nindent 4 }}
    annotations:
        # "helm.sh/resource-policy": "keep"
    type: Opaque
    data:
    # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (print (include "zrok.fullname" . ) "-admin-secret")) | default dict }}
    {{- $secretData := (get $secretObj "data") | default dict }}
    # set $adminToken / adminuser to existing secret data or generate a random one when not exists
    {{- $adminToken := (get $secretData "admin-token") | default (randAlphaNum 32 | b64enc) }}
    # set the secret values..
    admin-token: {{ $adminToken | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: {{ include "zrok.fullname" . }}-config
    labels:
        {{- include "zrok.labels" . | nindent 4 }}
data:
    ctrl.yml: |-
        #    _____ __ ___ | | __
        #   |_  / '__/ _ \| |/ /
        #    / /| | | (_) |   <
        #   /___|_|  \___/|_|\_\
        # controller configuration

        v:                  2

        admin:
        secrets:
            -              {{ $adminToken | quote }}

        endpoint:
        host:             0.0.0.0
        port:             {{ .Values.controller.service.containerPort }}

        store:
        path:             zrok.db
        type:             sqlite3

        ziti:
        api_endpoint:     {{ .Values.ziti.mgmtApiUrl | quote }}
        username:         {{ .Values.ziti.user | quote }}
        password:         {{ .Values.ziti.password | quote }}

    frontend.yml: |-

        #    _____ __ ___ | | __
        #   |_  / '__/ _ \| |/ /
        #    / /| | | (_) |   <
        #   /___|_|  \___/|_|\_\
        # frontend configuration

        host_match: {{ .Values.dnsZone | quote }}
        address: 0.0.0.0:{{ .Values.frontend.service.containerPort }}


    # post-install hook runs until one completion after Helm install/create
    # release; this should succeed immediately if the Ziti controller is already
    # running
    bootstrap-ziti.bash: |-
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail

        # gets vars from deployment env
        zrok admin bootstrap
        #please use 'zrok admin create frontend sqJRAINSiB public https://{token}.your.dns.name' to create a frontend instance

    # post-install hook runs until one completion after Helm install/create release
    bootstrap-frontend.bash: |-
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail

        # find Ziti ID of frontend
        FRONTEND_ID=$(ziti edge list identities 'name="frontend"' | jq -r '.data.id')
        echo "DEBUG: FRONTEND_ID=$FRONTEND_ID"

        # test if frontend already exists
        if ziti admin list frontends|grep ${FRONTEND_ID}; then
            echo "DEBUG: frontend already exists"
        else
            echo "INFO: creating frontend"
            zrok admin create frontend ${FRONTEND_ID} public "https://{token}.{{ .Values.dnsZone }}"
        fi


