{{if not .Values.noHelmHooks}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ziti-router.fullname" . }}-pre-upgrade-hook
  labels:
    {{- include "ziti-router.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-8"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
data:
  migrate-identity.bash: |-
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o pipefail
    set -o xtrace

    # - copy the private key from the hook-managed secret to the persistent volume
    # - rename router identity files to match the ziti config generator's conventions
    # - remove the hook-managed secret containing the private key, signaling the migration is complete

    trap 'echo "ERROR: ${BASH_SOURCE[0]}:${LINENO} exited with code $?" >&2;' ERR

    function noClobber() {
      local src=$1
      local dst=$2
      if [[ -s "${src}" ]]
      then
        if [[ -s "${dst}" ]]
        then
          echo "ERROR: ${dst} already exists, refusing to overwrite"
          return 1
        else
          echo "INFO: renaming ${src}"
          mv "${src}" "${dst}"
        fi
      else
        echo "INFO: ${src} is empty or does not exist, skipping"
      fi
    }

    if kubectl -n {{ .Release.Namespace }} get secret \
      {{ include "ziti-router.fullname" . }}-identity &>/dev/null
    then
      # prior versions of the chart stored certs in a Secret resource, so this copies those certs to the persistent
      # volume unless a file already exists in the persistent volume
      typeset -a KEYS=(
        $(
          kubectl -n {{ .Release.Namespace }} get secret \
            {{ include "ziti-router.fullname" . }}-identity \
              --output go-template='{{"{{"}}range $k,$v := .data{{"}}"}}{{"{{"}}if $v{{"}}"}}{{"{{"}}printf "%s " $k{{"}}"}}{{"{{"}}end{{"}}"}}{{"{{"}}end{{"}}"}}'
        )
      )
      echo "DEBUG: found identity secret dict keys: ${KEYS[*]}"
      for KEY in ${KEYS[@]}; do
        if [[ ${KEY} =~ ^tls\.key$ ]]
        then
          kubectl -n {{ .Release.Namespace }} get secret {{ include "ziti-router.fullname" . }}-identity \
          --output go-template='{{"{{"}}index .data "'${KEY}'" | base64decode {{"}}"}}' \
          > "{{ .Values.configMountDir }}/{{ include "ziti-router.fullname" . }}.key"
        fi
      done

      declare -A ID_FILES=(
        [client.crt]={{ include "ziti-router.fullname" . }}.cert
        [tls.crt]={{ include "ziti-router.fullname" . }}.server.chain.cert
        [ca.crt]={{ include "ziti-router.fullname" . }}.cas
      )

      for KEY in ${!ID_FILES[@]}; do
        noClobber "{{ .Values.configMountDir }}/${KEY}" "{{ .Values.configMountDir }}/${ID_FILES[${KEY}]}"
      done

      kubectl -n {{ .Release.Namespace }} delete secret \
        {{ include "ziti-router.fullname" . }}-identity
    else
      echo "INFO: identity secret does not exist"
    fi
{{end}}