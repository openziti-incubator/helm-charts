---
# Chart name: {{- .Chart.Name }} {{- .Values.nameOverride }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ziti-router.fullname" . }}-config
  labels:
    {{- include "ziti-router.labels" . | nindent 4 }}
data:
  # post-install-hook Job runs this first to enroll the router and install the Kubernetes Python client library
  {{ .Values.initScriptFile }}: |-
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o pipefail
    set -o xtrace

    # delayed exit to allow for debugging life-cycle hook Job
    trap 'echo "ERROR: ${BASH_SOURCE[0]}:${LINENO} exited with code $?" >&2; sleep 600' ERR

    if kubectl -n {{ .Release.Namespace }} get secret \
      {{ include "ziti-router.fullname" . }}-identity &>/dev/null
    then
      if [[ ${HELM_UPGRADE:-} == true ]]
      then
        # prior versions of the chart stored certs in a Secret resource, so this copies those certs to the persistent
        # volume unless a file already exists in the persistent volume
        echo 'INFO: checking for old shape of existing identity secret'
        typeset -a KEYS=(
          $(
            kubectl -n {{ .Release.Namespace }} get secret \
              {{ include "ziti-router.fullname" . }}-identity \
                --output go-template='{{"{{"}}range $k,$v := .data{{"}}"}}{{"{{"}}if $v{{"}}"}}{{"{{"}}printf "%s " $k{{"}}"}}{{"{{"}}end{{"}}"}}{{"{{"}}end{{"}}"}}'
          )
        )
        echo "DEBUG: found dictionary keys: ${KEYS[*]}"
        MIGRATE_SECRET=0
        for KEY in ${KEYS[@]}; do
          if [[ ${KEY} =~ ^(tls|client|ca)\.crt$ ]]
          then
            MIGRATE_SECRET=1
            if [[ -s "${ZITI_ROUTER_IDENTITY_DIR}/${KEY}" ]]
            then
              echo "INFO: ${KEY} already exists in persistent volume, skipping"
            else
              echo "INFO: copying ${KEY} to persistent volume"
              kubectl -n {{ .Release.Namespace }} get secret \
                {{ include "ziti-router.fullname" . }}-identity \
                  --output go-template='{{"{{"}}index .data "'${KEY}'" | base64decode {{"}}"}}' \
                    > "${ZITI_ROUTER_IDENTITY_DIR}/${KEY}"
            fi
          fi
        done
        if (( MIGRATE_SECRET ))
        then
          TMPFILE="$(mktemp)"
          kubectl -n {{ .Release.Namespace }} get secret \
            {{ include "ziti-router.fullname" . }}-identity \
              --output go-template='{{"{{"}}index .data "tls.key" | base64decode {{"}}"}}' \
                > "${TMPFILE}"
          kubectl -n {{ .Release.Namespace }} delete secret \
            {{ include "ziti-router.fullname" . }}-identity
          kubectl -n {{ .Release.Namespace }} create secret generic \
            {{ include "ziti-router.fullname" . }}-identity \
            --from-file=tls.key="${TMPFILE}"
          rm "${TMPFILE}"
        fi
        exit
      else
        echo 'ERROR: secret exists: "{{ include "ziti-router.fullname" . }}-identity"' >&2
        # this should never happen because Helm deletes the secret with pre-uninstall hook
        exit 1
      fi
    else
      echo "INFO: identity secret does not exist, attempting router enrollment"
    fi

    if [[ -n "{{ .Values.proxy.type }}" && -n "{{ .Values.proxy.address }}" && -n "{{ .Values.proxy.port }}" ]]; then
      export HTTPS_PROXY={{ .Values.proxy.type }}://{{ .Values.proxy.address }}:{{ .Values.proxy.port }}
    fi

    ziti router enroll \
      {{ .Values.configMountDir }}/{{ .Values.configFile }} \
      --jwt {{ .Values.configMountDir }}/{{ .Values.enrollJwtFile }} \
      --verbose
    
    if [[ -n "{{ .Values.proxy.type }}" && -n "{{ .Values.proxy.address }}" && -n "{{ .Values.proxy.port }}" ]]; then
      unset HTTPS_PROXY
    fi

    kubectl -n {{ .Release.Namespace }} create secret generic \
      {{ include "ziti-router.fullname" . }}-identity \
      --from-file=tls.key="${ZITI_ROUTER_IDENTITY_DIR}/tls.key"

    # purge generated private from persistent volume
    rm "${ZITI_ROUTER_IDENTITY_DIR}/tls.key"

  {{ .Values.deleteIdentityScriptFile }}: |-
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o pipefail
    set -o xtrace

    if kubectl -n {{ .Release.Namespace }} get secret \
      {{ include "ziti-router.fullname" . }}-identity &>/dev/null
    then
      kubectl -n {{ .Release.Namespace }} delete secret \
        {{ include "ziti-router.fullname" . }}-identity
      echo "INFO: Finished cleaning up router identity. Job will self-destruct in 20s."
      sleep 10
    else
      echo "INFO: no-op because identity secret does not exist. Job will self-destruct in 20s."
      sleep 10
      exit 0
    fi

  {{ .Values.configFile }}: |-

    v: 3

    identity:
      cert:        ${ZITI_ROUTER_IDENTITY_DIR}/client.crt
      server_cert: ${ZITI_ROUTER_IDENTITY_DIR}/tls.crt
      key:         ${ZITI_ROUTER_IDENTITY_DIR}/tls.key
      ca:          ${ZITI_ROUTER_IDENTITY_DIR}/ca.crt

    ctrl:
      # router control plane API (:6262)
      endpoint:    tls:{{ required "You must set .Values.ctrl.endpoint to the control plane advertised address. Try adding --set ctrl.endpoint=ziti-controller.example.com:6262 to your Helm command" .Values.ctrl.endpoint }}

    {{- if .Values.proxy }}
    proxy:
      type: {{ .Values.proxy.type }}
      address: {{ .Values.proxy.address }}:{{ .Values.proxy.port }}
    {{- end }}
    link:
      dialers:
        - binding: transport
      # When 'transport' is disabled this means we are a 'private' router, i.e.,
      # not providing incoming links to other routers. Private routers still
      # join the mesh, but only form outgoing links.
      {{- if .Values.linkListeners.transport.service.enabled }}
      listeners:
        - binding:          transport
          bind:             tls:0.0.0.0:{{ .Values.linkListeners.transport.containerPort }}
          advertise:        tls:{{ coalesce .Values.linkListeners.transport.advertisedHost .Values.advertisedHost (printf "%s-transport.%s.svc" (include "ziti-router.fullname" . ) .Release.Namespace) }}:{{ .Values.linkListeners.transport.advertisedPort }}
          options:
            outQueueSize:   4
      {{- end }}
    {{- if or (and .Values.tunnel.mode (ne .Values.tunnel.mode "none" )) (eq .Values.edge.enabled true) }}
    listeners:
    # bindings of edge and tunnel requires an "edge" section below
    {{- if (eq .Values.edge.enabled true) }}
      - binding: edge
        address: tls:0.0.0.0:{{ .Values.edge.containerPort }}
        options:
            advertise: {{ required "You must set either .Values.advertisedHost or .Values.edge.advertisedHost to the <host/ip> to advertise for this router. Try adding --set edge.advertisedHost=router.zitinetwork.example.org to your Helm command" (coalesce .Values.edge.advertisedHost .Values.advertisedHost) }}:{{ .Values.edge.advertisedPort }}
            connectTimeoutMs: 1000
            getSessionTimeout: 60
    {{- end }}
    {{- if and .Values.tunnel.mode (ne .Values.tunnel.mode "none" ) }}
      - binding: tunnel
        options:
          {{- if and .Values.tunnel.diverterPath ( ne .Values.tunnel.diverterPath "none" ) }}
            mode: {{ .Values.tunnel.mode }}:{{ .Values.tunnel.diverterPath }}
          {{- else }}
            mode: {{ .Values.tunnel.mode }}
          {{- end }}
          {{- if eq .Values.tunnel.mode "tproxy" }}
            resolver: {{ .Values.tunnel.resolver }}
            lanIf: {{ .Values.tunnel.lanIf }}
          {{- else if eq .Values.tunnel.mode "proxy" }}
            services:
            {{- range .Values.tunnel.proxyServices }}
              - "{{ .zitiService }}:{{ .containerPort }}"
            {{- end }}
          {{- end }}
    {{- end }}
    {{- end }}

    {{- if eq .Values.fabric.metrics.enabled true }}
    metrics:
      reportInterval: 5s
      intervalAgeThreshold: 5s
    {{- end }}
    
    edge:
      csr:
        {{- if .Values.csr.country }}
        country: {{ .Values.csr.country }}
        {{- end }}
        {{- if .Values.csr.province }}
        province: {{ .Values.csr.province }}
        {{- end }}
        {{- if .Values.csr.locality }}
        locality: {{ .Values.csr.locality }}
        {{- end }}
        {{- if .Values.csr.organization }}
        organization: {{ .Values.csr.organization }}
        {{- end }}
        {{- if .Values.csr.organizationalUnit }}
        organizationalUnit: {{ .Values.csr.organizationalUnit }}
        {{- end }}
        sans:
          dns:
            {{- if eq (default false .Values.csr.sans.noDefaults) false }}
            - localhost
            {{- if .Values.advertisedHost }}
            - {{ .Values.advertisedHost }}
            {{- end }}
            {{- if and .Values.edge.enabled .Values.edge.advertisedHost }}
            - {{ .Values.edge.advertisedHost }}
            {{- end }}
            {{- if and .Values.linkListeners.transport.service.enabled .Values.linkListeners.transport.advertisedHost }}
            - {{ .Values.linkListeners.transport.advertisedHost }}
            {{- end }}
            {{- end }}
            {{- range .Values.csr.sans.dns }}
            - {{ . | quote }}
            {{- end }}
          ip:
            {{- if eq (default false .Values.csr.sans.noDefaults) false }}
            - 127.0.0.1
            {{- if and .Values.edge.enabled  .Values.edge.service.enabled }}
            {{- with .Values.edge.service.loadBalancerIP }}
            - {{ . }}
            {{- end }}
            {{- with .Values.edge.service.externalIPs }}
            {{- toYaml . | nindent 4 }}
            {{- end }}
            {{- end }}
            {{- if and .Values.linkListeners.transport.service.enabled  .Values.linkListeners.transport.service.enabled }}
            {{- with .Values.linkListeners.transport.service.loadBalancerIP }}
            - {{ . }}
            {{- end }}
            {{- with .Values.linkListeners.transport.service.externalIPs }}
            {{- toYaml . | nindent 4 }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range .Values.csr.sans.ip }}
            - {{ . | quote }}
            {{- end }}

    #transport:
    #  ws:
    #    writeTimeout: 10
    #    readTimeout: 5
    #    idleTimeout: 5
    #    pongTimeout: 60
    #    pingInterval: 54
    #    handshakeTimeout: 10
    #    readBufferSize: 4096
    #    writeBufferSize: 4096
    #    enableCompression: true
    #    server_cert: ~/.ziti/config/certs/192.168.10.11.server.chain.cert
    #    key: ~/.ziti/config/certs/192.168.10.11.key

    {{- if .Values.forwarder }}
    forwarder:
        latencyProbeInterval: 10
        xgressDialQueueLength: 1000
        xgressDialWorkerCount: 128
        linkDialQueueLength: 1000
        linkDialWorkerCount: 32

