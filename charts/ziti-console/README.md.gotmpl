<!-- README.md generated by helm-docs from README.md.gotmpl -->
{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Add the OpenZiti Charts Repo to Helm

```bash
helm repo add openziti https://docs.openziti.io/helm-charts/
```

## Minimal Installation

This chart deploys a pod running `ziti-console`, [the OpenZiti console](https://github.com/openziti/ziti-console/).

After adding the charts repo to Helm then you may install the chart.

```bash
helm install \
  --namespace ziti-console --create-namespace --generate-name \
  openziti/ziti-console \
    --set service.type=LoadBalancer \
    --set service.advertisedPort=80
```

Although simple, using the LoadBalancer type may not be ideal for a variety of reasons. Here are some examples for creating an HTTP Ingress.

## Ingress-Nginx Sample Values

You can merge these ingress-nginx values when you install or upgrade.

```yaml
ingress:
  enabled: true
  ingressClassName: nginx
  advertisedHost: myziti-console.zitik8s

settings:
  edgeControllers:
    - name: Ziti Edge Mgmt API
      # URL of controller's mgmt API cluster service
      url: https://myziti-controller-client.ziti-controller.svc:443 
      # or https://myziti-controller-mgmt.ziti-controller.svc:443 if mgmt API is separate
      default: true
```

## Traefik Sample Values

This is a minimal `values.yaml` sample for an k3s-enviroment using traefik as ingress loadbalancer:

```yaml
ingress:
  enabled: true
  ingressClassName: nginx
  advertisedHost: myziti-console.zitik8s
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
  labels:
    ingressMethod: traefik

settings:
  edgeControllers:
    - name: Ziti Edge Mgmt API
      # URL of controller's mgmt API cluster service
      url: https://myziti-controller-client.ziti-controller.svc:443 
      # or https://myziti-controller-mgmt.ziti-controller.svc:443 if mgmt API is separate
      default: true

```

## TLS with Cert Manager

Cert Manager can provide a Let's Encrypt certificate for you, even a wildcard certificate with ACMEv2. As a prerequisite, you need a cert-manager Issuer for Let's Encrypt ([reference](https://cert-manager.io/docs/tutorials/acme/pomerium-ingress/#configure-lets-encrypt-issuer)). Here are example chart values showing annotations for cert-manager and ingress-nginx.

```yaml
ingress:
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: my-letsencrypt-issuer
  advertisedHost: myziti-console.example.com
  tlsSecret: myziti-console-tls-secret  # secret managed by issuer
```

## Values Reference

{{ template "chart.valuesTable" . }}

<!-- README.md generated by helm-docs from README.md.gotmpl -->
